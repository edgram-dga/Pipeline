private static async Task<JArray> ConsultarApiAsync(string url, string xmlBody)
{
    int maxIntentos = 5;
    int delayBase = 1000; // 1s

    for (int intento = 1; intento <= maxIntentos; intento++)
    {
        try
        {
            var options = new RestClientOptions(url)
            {
                ThrowOnAnyError = false,
                Timeout = 60000 // 60s
            };

            var client = new RestClient(options);
            var request = new RestRequest("", Method.Post);
            request.AddHeader("Content-Type", "application/xml");
            request.AddStringBody(xmlBody, DataFormat.Xml);

            var response = await client.ExecuteAsync(request);

            if (response.IsSuccessful)
            {
                return JArray.Parse(response.Content ?? "[]");
            }
            else
            {
                Console.WriteLine($"[WARN] Error API ({url}): {response.StatusCode} {response.Content}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Excepción API ({url}): {ex.Message}");
        }

        // Esperar antes del siguiente intento
        int delay = delayBase * (int)Math.Pow(2, intento - 1); // backoff exponencial
        Console.WriteLine($"Reintentando en {delay / 1000} segundos...");
        await Task.Delay(delay);
    }

    // Si no se logró después de reintentos, devolver vacío
    Console.WriteLine($"[ERROR] API {url} no respondió después de {maxIntentos} intentos.");
    return new JArray();
}
