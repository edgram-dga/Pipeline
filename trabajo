// SemÃ¡foros globales para controlar concurrencia por API
private static readonly SemaphoreSlim _semaforoApi1 = new SemaphoreSlim(1, 1);
private static readonly SemaphoreSlim _semaforoApi2 = new SemaphoreSlim(1, 1);

private static async Task<string> ConsultarApiAsync(string url, string xmlRequest, SemaphoreSlim semaforo, int maxReintentos = 3)
{
    await semaforo.WaitAsync(); // ðŸ‘ˆ asegura que solo una consulta por API a la vez
    try
    {
        int intento = 0;
        Exception? ultimaExcepcion = null;

        while (intento < maxReintentos)
        {
            try
            {
                var options = new RestClientOptions(url)
                {
                    ThrowOnAnyError = false,
                    MaxTimeout = 120000
                };

                using var client = new RestClient(options);

                var request = new RestRequest("", Method.Post);
                request.AddHeader("Content-Type", "application/xml");
                request.AddStringBody(xmlRequest, DataFormat.Xml);

                var response = await client.ExecuteAsync(request);

                if (response.IsSuccessful)
                {
                    return response.Content ?? "";
                }

                // si la API devolviÃ³ error â†’ lo guardamos y reintentamos
                ultimaExcepcion = new Exception(
                    $"Error en API {url}: {response.StatusCode} - {response.Content}"
                );
            }
            catch (Exception ex)
            {
                ultimaExcepcion = ex;
            }

            intento++;
            if (intento < maxReintentos)
            {
                int delay = 1000 * intento; // 1s, 2s, 3s...
                Console.WriteLine($"[WARN] Reintentando {url}, intento {intento}/{maxReintentos} en {delay / 1000}s...");
                await Task.Delay(delay);
            }
        }

        throw new Exception($"Error al consultar API {url} tras {maxReintentos} intentos.", ultimaExcepcion);
    }
    finally
    {
        semaforo.Release(); // ðŸ‘ˆ libera la API para la siguiente consulta
    }
}
